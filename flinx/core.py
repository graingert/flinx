import sys
from functools import reduce
from pathlib import Path

import pytoml as toml
from jinja2 import Environment

from .project_metadata import NoUniqueModuleError, ProjectMetadata

GENERATED_TEXT = "THIS FILE IS AUTOMATICALLY GENERATED BY FLINX. "
"MANUAL CHANGES WILL BE LOST."

# Allow these names as shortcuts for sphinx.ext.*.
sphinx_builtin_extensions = ['autodoc', 'autosectionlabel', 'autosummary', 'coverage',
                             'doctest', 'extlinks', 'githubpages', 'graphviz',
                             'ifconfig', 'imgconverter',
                             'imgmath', 'mathjax', 'jsmith', 'inheritance_diagram',
                             'intersphinx', 'linkcode', 'napoleon', 'todo', 'viewcode']

# Configuration variables that start with image_ imply the imgconverter (not image)
# extension, etc.
config_var_ext_prefixes = {'image': 'imgconverter', 'inheritance': 'inheritance_graph'}

# Use this, if the user doesn't specify extensions.
default_extensions = ['autodoc']

env = Environment()
env.filters['repr'] = repr
poject_relpath = Path('..')
env.filters['project_rel'] = lambda s: str(poject_relpath / s)

TEMPLATE_DIR = Path(__file__).parent / 'templates'
conf_tpl = env.from_string((TEMPLATE_DIR / 'conf.py.tpl').read_text())
index_tpl = env.from_string((TEMPLATE_DIR / 'index.rst.tpl').read_text())


def write_template_files(output_dir, include_generated_warning=True, verbose=True):
    """Generate the ``conf.py`` and ``README.rst`` files."""
    # TODO: refuse to overwrite non-generated files?
    metadata = ProjectMetadata.from_dir('.')
    config = get_sphinx_configuration('.')
    try:
        metadata['name']  # for effect
    except NoUniqueModuleError as e:
        sys.stderr.write("{}\n".format(e))
        sys.exit(1)
    generated_text = GENERATED_TEXT if include_generated_warning else None
    index_text = index_tpl.render(
        readme=metadata['readme'],
        module_name=metadata['module'],
        generated_text=generated_text,
    )
    index_path = output_dir / 'index.rst'
    index_path.write_text(index_text)
    if verbose:
        print('wrote', index_path)

    author = metadata['author']
    copyright_year = metadata['date']
    config['extensions'] = get_extensions(config)
    conf_text = conf_tpl.render(
        module_path='..',
        project=metadata['name'],
        copyright=f'{copyright_year}, {author}',
        author=author,
        version=metadata['version'],
        source_suffix=['.rst'],
        master_basename='index',
        generated_text=generated_text,
        config=config.items(),
    )
    conf_path = output_dir / 'conf.py'
    conf_path.write_text(conf_text)
    if verbose:
        print('wrote', conf_path)
    return conf_path


def get_extensions(config_vars):
    """Infer the extensions from the Sphinx configuration variables."""
    # expand shortcut names
    extensions = ['sphinx.ext.' + ext
                  if ext in sphinx_builtin_extensions else ext
                  for ext in config_vars.get('extensions', default_extensions)]
    # add extensions implied by configuration value names
    prefixes = {k.split('_', 1)[0] for k in config_vars.keys() if '_' in k}
    detected_exts = (config_var_ext_prefixes.get(prefix, prefix)
                     for prefix in prefixes)
    auto_exts = sorted('sphinx.ext.' + ext
                       for ext in detected_exts
                       if ext in sphinx_builtin_extensions)
    for ext in auto_exts:
        if ext not in extensions:
            extensions.append(ext)
    return extensions


def get_sphinx_configuration(project_dir):
    """Read the Sphinx configuration from ``pyproject.toml```."""
    try:
        project = toml.loads((Path(project_dir) / 'pyproject.toml').read_text())
        return reduce(lambda a, b: a[b], 'tool.flinx.configuration'.split('.'), project)
    except (FileNotFoundError, KeyError):
        return {}
