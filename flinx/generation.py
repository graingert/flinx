import sys
from pathlib import Path

from jinja2 import Environment

from .configuration import get_sphinx_configuration
from .extensions import get_extensions
from .project_metadata import NoUniqueModuleError, ProjectMetadata

GENERATED_TEXT = "THIS FILE IS AUTOMATICALLY GENERATED BY FLINX. "
"MANUAL CHANGES WILL BE LOST."

env = Environment()
env.filters['repr'] = repr
poject_relpath = Path('..')
env.filters['project_rel'] = lambda s: str(poject_relpath / s)

TEMPLATE_DIR = Path(__file__).parent / 'templates'
conf_tpl = env.from_string((TEMPLATE_DIR / 'conf.py.tpl').read_text())
index_tpl = env.from_string((TEMPLATE_DIR / 'index.rst.tpl').read_text())


def write_template_files(output_dir, include_generated_warning=True, verbose=True):
    """Generate the ``conf.py`` and ``README.rst`` files."""
    # TODO: refuse to overwrite non-generated files?
    metadata = ProjectMetadata.from_dir('.')
    config = get_sphinx_configuration('.')
    try:
        metadata['name']  # for effect
    except NoUniqueModuleError as e:
        sys.stderr.write("{}\n".format(e))
        sys.exit(1)
    generated_text = GENERATED_TEXT if include_generated_warning else None
    index_text = index_tpl.render(
        readme=metadata['readme'],
        module_name=metadata['module'],
        generated_text=generated_text,
    )
    index_path = output_dir / 'index.rst'
    index_path.write_text(index_text)
    if verbose:
        print('wrote', index_path)

    author = metadata['author']
    copyright_year = metadata['date']
    config['extensions'] = get_extensions(config)
    conf_text = conf_tpl.render(
        module_path='..',
        project=metadata['name'],
        copyright=f'{copyright_year}, {author}',
        author=author,
        version=metadata['version'],
        source_suffix=['.rst'],
        master_basename='index',
        generated_text=generated_text,
        config=config.items(),
    )
    conf_path = output_dir / 'conf.py'
    conf_path.write_text(conf_text)
    if verbose:
        print('wrote', conf_path)
    return conf_path
